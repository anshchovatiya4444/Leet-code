------------------------------------------------------------------------------------------------------------

1. Two Sum 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
     
     * returnSize=2;
        int*ret = malloc(*returnSize*sizeof(int));
      for(int i=0; i<numsSize;i++)
    {
        for(int j=0;j<numsSize;j++)
        {
            if(i==j) continue;

            if (nums[i]+nums[j]==target)
            {
          
               ret[0] = i;
               ret[1] = j;
            return  ret;
            }
        }
    }
    
    free(ret);
    
 return NULL;
    
}


------------------------------------------------------------------------------------------------------------

9. Palindrome Number

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

#include<string.h>

bool isPalindrome(int x) {

    char string[20];
    sprintf(string,"%d",x);
    printf("%s",string);
    int j = strlen(string)-1;
    for(int i=0; i<strlen(string)/2;i++)
    {
        if(string[i]!=string[j])
        {
            return false;
        }
        j--;

    }

    return true;
    
}

------------------------------------------------------------------------------------------------------------

26. Remove Duplicates from Sorted Array

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

int removeDuplicates(int* nums, int numsSize) {

    int check=0;
    int v=0;
    for(int i=0;i<numsSize;i++)
    {
        for(int j=0;j<=i;j++)
        {
            if(i==j){ continue;}
            else if(nums[j]==nums[i]) {check=1; break;} 
            else check=0;
        }
        if(check==0)
        {
            nums[v]=nums[i];
            v++;
        }
    }
    return v;

}

------------------------------------------------------------------------------------------------------------

27. Remove Element

Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).


int removeElement(int* nums, int numsSize, int val) 
{
    int count=0;

    for(int i=0,j=0;i<numsSize;i++)
    {
        if(nums[i]!=val)
        {
            nums[j]=nums[i];
            j++;
            count++;
        }

    }


    return count;

}  

------------------------------------------------------------------------------------------------------------

58. Length of Last Word

Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.

class Solution {
public:
    int lengthOfLastWord(string s) {
        
        int len=s.length();
      int count=0;

        for(int i=len-1;i>=0;i--)
                {
                    if(s[i]!=' ')
                    {
                        while(i>=0&&s[i]!=' ')
                        {
                            count++;
                            i--;
                        }
                        return count;
                    }
                }
     return count;


    }
};

------------------------------------------------------------------------------------------------------------

69. Sqrt(x)

Example 1:

Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.


int mySqrt(int num) {

    double x = num;
    double y = 1.0;
    double e = 0.000001; /* e defines the accuracy level*/

    while (x - y > e) {
        x = (x + y) / 2;
        y = num / x;
    }

    return x;
    
}

------------------------------------------------------------------------------------------------------------

231. Power of Two

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1

bool isPowerOfTwo(int n) {
    long int v=1;
    bool res=false;

    for(int i=0;i<=30;i++)
    {
        if(n==v) 
        {
            res = true;
            break;
        }
     
        else {res=false;}
           v*=2;
    }
    return res;
    
}

------------------------------------------------------------------------------------------------------------

326. Power of Three 

Example 1:

Input: n = 27
Output: true
Explanation: 27 = 33

bool isPowerOfThree(int n) {
 
        long int v=1;
        while(v<=n)
        {
           if(n==v) return true;
            v*=3;
        }
        
       return false;
    }


------------------------------------------------------------------------------------------------------------

387. First Unique Character in a String

Example 1:

Input: s = "leetcode"
Output: 0

int firstUniqChar(char* s) {

    int a=0;
    for( int i=0; s[i]!='\0';i++)
    {
        for(int j=0;  s[j]!='\0'; j++)
        {
            if (i==j) {continue;}
           if (s[i]==s[j]) 
           {
               a=-1;
               break;
           }
           else 
           {
              a=i;
           }

        }
       if (a!=-1) return a;
  
           
    }
   
    return a;
    
}

------------------------------------------------------------------------------------------------------------

507. Perfect Number

Example 1:

Input: num = 28
Output: true
Explanation: 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, and 14 are all divisors of 28.

#include<math.h>
bool checkPerfectNumber(int num) {

    if(num==1) return false;

    int sum=1;
    for(int i=2;i<num;i++)
    {
        if(num%i==0)
        {
            sum+=i; 
        }
    }
    return sum==num;
}

------------------------------------------------------------------------------------------------------------

509. Fibonacci Number

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

class Solution {
public:
    int fib(int n) {
        if(n==0) return 0;
        else if(n==1) return 1;

        else return fib(n-1)+fib(n-2);
        
    }
};

------------------------------------------------------------------------------------------------------------

1281. Subtract the Product and Sum of Digits of an Integer

Example 1:

Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15

int subtractProductAndSum(int n) {
    int v=0;
    int sum=0;
    int product=1;
    for(int i=1;n>0;i++)
    {
        v=n%10;
        sum+=v;
        product*=v;
        n=n/10;
        
    }
    return product-sum;
    
}

------------------------------------------------------------------------------------------------------------

1512. Number of Good Pairs

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

int numIdenticalPairs(int* nums, int numsSize) {

    int count=0;

    for (int i=0;i<numsSize;i++)
        {
            for(int j=i+1;j<numsSize;j++)
            {
                if(nums[i]==nums[j])
                {
                    count++;
                }
            }
        }
        return count;
}

------------------------------------------------------------------------------------------------------------

2235. Add Two Integers

Example 1:

Input: num1 = 12, num2 = 5
Output: 17
Explanation: num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned.

int sum(int num1, int num2) {
    return (num1)+(num2);
}

------------------------------------------------------------------------------------------------------------

2413. Smallest Even Multiple

Input: n = 5
Output: 10
Explanation: The smallest multiple of both 5 and 2 is 10.

int smallestEvenMultiple(int n) {
    int res=n*2;
   for(int i=n;i>0;i--)
   {
       if(i%2==0)
       {
           if(i%n==0)
           {
              res = i;
           }
       }
   }
    return res;
}

------------------------------------------------------------------------------------------------------------

2469. Convert the Temperature

Input: celsius = 36.50
Output: [309.65000,97.70000]
Explanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.

double* convertTemperature(double celsius, int* returnSize) {
    
    *returnSize=2;

    double *res = malloc(*returnSize*sizeof(double));

    res[0] = celsius+273.15;
    res[1] = celsius*1.80+32.00;


    return res;



}

------------------------------------------------------------------------------------------------------------

2769. Find the Maximum Achievable Number

Input: num = 4, t = 1
Output: 6
Explanation: The maximum achievable number is x = 6; it can become equal to num after performing this operation:
1- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5. 
It can be proven that there is no achievable number larger than 6.

int theMaximumAchievableX(int num, int t){
    
    return num+t+t;

}

------------------------------------------------------------------------------------------------------------

2894. Divisible and Non-divisible Sums Difference

Input: n = 10, m = 3
Output: 19
Explanation: In the given example:
- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.
- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.
We return 37 - 18 = 19 as the answer.

int differenceOfSums(int n, int m) {\

    int num1=0;
    int num2=0;

    for(int j=1;j<=n;j++)
    {
        if(j%m!=0)
        {
           num1+=j;
        }
        if(j%m==0)
        {
           num2+=j;
        }
    }
    return num1-num2;
}

------------------------------------------------------------------------------------------------------------
