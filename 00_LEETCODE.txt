------------------------------------------------------------------------------------------------------------

1. Two Sum 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
     
     * returnSize=2;
        int*ret = malloc(*returnSize*sizeof(int));
      for(int i=0; i<numsSize;i++)
    {
        for(int j=0;j<numsSize;j++)
        {
            if(i==j) continue;

            if (nums[i]+nums[j]==target)
            {
          
               ret[0] = i;
               ret[1] = j;
            return  ret;
            }
        }
    }
    
    free(ret);
    
 return NULL;
    
}


------------------------------------------------------------------------------------------------------------

9. Palindrome Number

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

#include<string.h>

bool isPalindrome(int x) {

    char string[20];
    sprintf(string,"%d",x);
    printf("%s",string);
    int j = strlen(string)-1;
    for(int i=0; i<strlen(string)/2;i++)
    {
        if(string[i]!=string[j])
        {
            return false;
        }
        j--;

    }

    return true;
    
}

------------------------------------------------------------------------------------------------------------

26. Remove Duplicates from Sorted Array

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

int removeDuplicates(int* nums, int numsSize) {

    int check=0;
    int v=0;
    for(int i=0;i<numsSize;i++)
    {
        for(int j=0;j<=i;j++)
        {
            if(i==j){ continue;}
            else if(nums[j]==nums[i]) {check=1; break;} 
            else check=0;
        }
        if(check==0)
        {
            nums[v]=nums[i];
            v++;
        }
    }
    return v;

}

------------------------------------------------------------------------------------------------------------

27. Remove Element

Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).


int removeElement(int* nums, int numsSize, int val) 
{
    int count=0;

    for(int i=0,j=0;i<numsSize;i++)
    {
        if(nums[i]!=val)
        {
            nums[j]=nums[i];
            j++;
            count++;
        }

    }


    return count;

}  

------------------------------------------------------------------------------------------------------------

58. Length of Last Word

Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.

class Solution {
public:
    int lengthOfLastWord(string s) {
        
        int len=s.length();
      int count=0;

        for(int i=len-1;i>=0;i--)
                {
                    if(s[i]!=' ')
                    {
                        while(i>=0&&s[i]!=' ')
                        {
                            count++;
                            i--;
                        }
                        return count;
                    }
                }
     return count;


    }
};

------------------------------------------------------------------------------------------------------------

69. Sqrt(x)

Example 1:

Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.


int mySqrt(int num) {

    double x = num;
    double y = 1.0;
    double e = 0.000001; /* e defines the accuracy level*/

    while (x - y > e) {
        x = (x + y) / 2;
        y = num / x;
    }

    return x;
    
}

------------------------------------------------------------------------------------------------------------

231. Power of Two

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1

bool isPowerOfTwo(int n) {
    long int v=1;
    bool res=false;

    for(int i=0;i<=30;i++)
    {
        if(n==v) 
        {
            res = true;
            break;
        }
     
        else {res=false;}
           v*=2;
    }
    return res;
    
}

------------------------------------------------------------------------------------------------------------

326. Power of Three 

Example 1:

Input: n = 27
Output: true
Explanation: 27 = 33

bool isPowerOfThree(int n) {
 
        long int v=1;
        while(v<=n)
        {
           if(n==v) return true;
            v*=3;
        }
        
       return false;
    }


------------------------------------------------------------------------------------------------------------

387. First Unique Character in a String

Example 1:

Input: s = "leetcode"
Output: 0

int firstUniqChar(char* s) {

    int a=0;
    for( int i=0; s[i]!='\0';i++)
    {
        for(int j=0;  s[j]!='\0'; j++)
        {
            if (i==j) {continue;}
           if (s[i]==s[j]) 
           {
               a=-1;
               break;
           }
           else 
           {
              a=i;
           }

        }
       if (a!=-1) return a;
  
           
    }
   
    return a;
    
}

------------------------------------------------------------------------------------------------------------

507. Perfect Number

Example 1:

Input: num = 28
Output: true
Explanation: 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, and 14 are all divisors of 28.

#include<math.h>
bool checkPerfectNumber(int num) {

    if(num==1) return false;

    int sum=1;
    for(int i=2;i<num;i++)
    {
        if(num%i==0)
        {
            sum+=i; 
        }
    }
    return sum==num;
}

------------------------------------------------------------------------------------------------------------

509. Fibonacci Number

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

class Solution {
public:
    int fib(int n) {
        if(n==0) return 0;
        else if(n==1) return 1;

        else return fib(n-1)+fib(n-2);
        
    }
};

------------------------------------------------------------------------------------------------------------

1281. Subtract the Product and Sum of Digits of an Integer

Example 1:

Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15

int subtractProductAndSum(int n) {
    int v=0;
    int sum=0;
    int product=1;
    for(int i=1;n>0;i++)
    {
        v=n%10;
        sum+=v;
        product*=v;
        n=n/10;
        
    }
    return product-sum;
    
}

------------------------------------------------------------------------------------------------------------

1342. Number of Steps to Reduce a Number to Zero

Example 1:

Input: num = 14
Output: 6
Explanation: 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.
Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.

int numberOfSteps(int num) {
    int step=0;
    for(int i=1;num>0;i++)
    {
        if(num%2!=0)
        {
            num--;
            step++;

        }
        if(num%2==0&&num!=0)
        {
            num=num/2;
            step++;
        }
    }
    return step;
}
------------------------------------------------------------------------------------------------------------

1512. Number of Good Pairs

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

int numIdenticalPairs(int* nums, int numsSize) {

    int count=0;

    for (int i=0;i<numsSize;i++)
        {
            for(int j=i+1;j<numsSize;j++)
            {
                if(nums[i]==nums[j])
                {
                    count++;
                }
            }
        }
        return count;
}

------------------------------------------------------------------------------------------------------------

1688. Count of Matches in Tournament

Input: n = 7
Output: 6
Explanation: Details of the tournament: 
- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.
- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.
- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
Total number of matches = 3 + 2 + 1 = 6.


int numberOfMatches(int n){

    int match=n;
    int total=0;




        for(int i=0;match>=1;i++)
        { 
        if(n%2==0)
         {
        match = n/2;
        n=n/2;
        total+=match;
         }
 

         else
         { 
        match = (n-1)/2;
        n=((n-1)/2)+1;
        total+=match;
         } 
        }

    return total;

}

------------------------------------------------------------------------------------------------------------

2235. Add Two Integers

Example 1:

Input: num1 = 12, num2 = 5
Output: 17
Explanation: num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned.

int sum(int num1, int num2) {
    return (num1)+(num2);
}

------------------------------------------------------------------------------------------------------------

2413. Smallest Even Multiple

Input: n = 5
Output: 10
Explanation: The smallest multiple of both 5 and 2 is 10.

int smallestEvenMultiple(int n) {
    int res=n*2;
   for(int i=n;i>0;i--)
   {
       if(i%2==0)
       {
           if(i%n==0)
           {
              res = i;
           }
       }
   }
    return res;
}

------------------------------------------------------------------------------------------------------------

2469. Convert the Temperature

Input: celsius = 36.50
Output: [309.65000,97.70000]
Explanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.

double* convertTemperature(double celsius, int* returnSize) {
    
    *returnSize=2;

    double *res = malloc(*returnSize*sizeof(double));

    res[0] = celsius+273.15;
    res[1] = celsius*1.80+32.00;


    return res;



}

------------------------------------------------------------------------------------------------------------

2652. Sum Multiples

Input: n = 7
Output: 21
Explanation: Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21.

int sumOfMultiples(int n){
    int sum=0;
    for(int i=3;i<=n;i++)
    {
        if(i%3==0||i%5==0||i%7==0)
        {
            sum+=i;
        }
    }
    return sum;
}

------------------------------------------------------------------------------------------------------------

2769. Find the Maximum Achievable Number

Input: num = 4, t = 1
Output: 6
Explanation: The maximum achievable number is x = 6; it can become equal to num after performing this operation:
1- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5. 
It can be proven that there is no achievable number larger than 6.

int theMaximumAchievableX(int num, int t){
    
    return num+t+t;

}

------------------------------------------------------------------------------------------------------------

2894. Divisible and Non-divisible Sums Difference

Input: n = 10, m = 3
Output: 19
Explanation: In the given example:
- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.
- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.
We return 37 - 18 = 19 as the answer.

int differenceOfSums(int n, int m) {

    int num1=0;
    int num2=0;

    for(int j=1;j<=n;j++)
    {
        if(j%m!=0)
        {
           num1+=j;
        }
        if(j%m==0)
        {
           num2+=j;
        }
    }
    return num1-num2;
}

------------------------------------------------------------------------------------------------------------

2520. Count the Digits That Divide a Number

Example 1:

Input: num = 7
Output: 1
Explanation: 7 divides itself, hence the answer is 1.


int countDigits(int num) {
    int v=num;
    int s[11];
    int i=0;
    while(v>0)
    {
        s[i]=v%10;
        v=v/10;
        i++;
    }
    int count=0;
    for(int j=0;j<=i;j++)
    {
        if(s[j]!=0&&num%s[j]==0)
        {
            count++;
        }
    }
    return count;
}

------------------------------------------------------------------------------------------------------------

2535. Difference Between Element Sum and Digit Sum of an Array

Example 1:

Input: nums = [1,15,6,3]
Output: 9
Explanation: 
The element sum of nums is 1 + 15 + 6 + 3 = 25.
The digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.
The absolute difference between the element sum and digit sum is |25 - 16| = 9.

int differenceOfSum(int* nums, int numsSize) {
  int Esum=0;
  int Dsum=0;
    int v=0;

  for(int i=0;i<numsSize;i++)
  {
      int t=nums[i];
      for(int j=1;t>0;j++)
      {
          v=t%10;
          t=t/10;
          Dsum+=v;
      }
      Esum+=nums[i];
  }  
  return Esum-Dsum;
}

------------------------------------------------------------------------------------------------------------

1323. Maximum 69 Number

Example 1:

Input: num = 9669
Output: 9969
Explanation: 
Changing the first digit results in 6669.
Changing the second digit results in 9969.
Changing the third digit results in 9699.
Changing the fourth digit results in 9666.
The maximum number is 9969.


#include<string>

class Solution {
public:
    int maximum69Number (int num) {
        string s=to_string(num);

        int len=s.length();

        int arr[5];

        arr[len]=num;

        for(int i=0;i<len;i++)
        {

        string v=s;

            if(v[i]=='9')
            {
                v[i]='6';
            }
            else 
            {
                v[i]='9';
            }


          arr[i]=stoi(v);

        }
        if(arr[0]>arr[1]&&arr[0]>arr[2]&&arr[0]>arr[3]) 
        {
            return arr[0];
        }
        else if(arr[1]>arr[0]&&arr[1]>arr[2]&&arr[1]>arr[3]) 
        {
            return arr[1];
        }
        else if(arr[2]>arr[0]&&arr[2]>arr[1]&&arr[2]>arr[3]) 
        {
            return arr[2];
        }
        else if(arr[len]>arr[0]&&arr[len]>arr[1]&&arr[len]>arr[2]&&arr[len]>arr[3]) 
        {
            return arr[len];
        }

        return arr[3];
        
    }
};

------------------------------------------------------------------------------------------------------------

2119. A Number After a Double Reversal

Input: num = 526
Output: true
Explanation: Reverse num to get 625, then reverse 625 to get 526, which equals num.

class Solution {
public:
    bool isSameAfterReversals(int num) {
        if(num==0)
        {
            return true;
        }
        else
        {
            int v=num%10;
            if(v==0)
            {
                return false;
            }
        }
    return true;
    }
};

------------------------------------------------------------------------------------------------------------

2427. Number of Common Factors

class Solution {
public:
    int commonFactors(int a, int b) {
    
    int r;
    int common=0;
    if(a<b) r=a;
    else r=b;

        for(int i=1;i<=r;i++)
        {
            if(a%i==0&&b%i==0)
            {
               common++;
            }
        }
        return common;
    }
};

------------------------------------------------------------------------------------------------------------

2651. Calculate Delayed Arrival Time

Example 1:

Input: arrivalTime = 15, delayedTime = 5 
Output: 20 
Explanation: Arrival time of the train was 15:00 hours. It is delayed by 5 hours. Now it will reach at 15+5 = 20 (20:00 hours).


class Solution {
public:
    int findDelayedArrivalTime(int arrivalTime, int delayedTime) {
        int v= arrivalTime+delayedTime;
        if(v==24)
        {
            return 0;
        }
        if(v>24)
        {
            return v-24;
        }
    return v;
    }
};

------------------------------------------------------------------------------------------------------------

728. Self Dividing Numbers

Example 1:

Input: left = 1, right = 22
Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]

int* selfDividingNumbers(int left, int right, int* returnSize) {

    *returnSize =(right-left)+1;

    int *ptr = malloc(*returnSize*sizeof(int));

    int u=0;

    for(int i=left,v=1;i<=right;i++)
    {
        int check=1;
        for(int j=1,g=i;g>0;j++)
        {
            v=g%10;
            if(v==0||i%v!=0)
            { 
                check=0;
            }
            g=g/10;
        }

        if(check==1)
        {
            ptr[u]=i;
            u++;
        }
    }

   ptr = realloc(ptr,u*sizeof(int));

   *returnSize = u;
   // It must be writen because it carry returnsize which will be used in main function

   return ptr;
}

------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
